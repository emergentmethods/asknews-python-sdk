from __future__ import annotations

from typing import Any, Dict, List, Literal, Optional, Union

from pydantic import BaseModel, ConfigDict, Discriminator, Field, Tag
from typing_extensions import Annotated, TypeAlias

from asknews_sdk.dto.base import BaseSchema
from asknews_sdk.dto.chat import WebSearchResult
from asknews_sdk.dto.news import SearchResponseDictItem


def object_discriminator(v: Any) -> str:
    if isinstance(v, dict):
        return v.get("object", "")
    return getattr(v, "object", "")


def kind_discriminator(v: Any) -> str:
    if isinstance(v, dict):
        return v.get("kind", "")
    return getattr(v, "kind", "")


class DeepNewsSources(BaseModel):
    news: Annotated[List[SearchResponseDictItem], Field(title="News")]
    web: Annotated[List[WebSearchResult], Field(title="Web")]


class CreateDeepNewsRequestMessage(BaseModel):
    role: Annotated[str, Field(title="Role")]
    content: Annotated[str, Field(title="Content")]
    name: Annotated[Optional[str], Field(None, title="Name")]
    function_call: Annotated[Optional[Dict[str, Any]], Field(None, title="Function Call")]


class CreateDeepNewsResponseChoice(BaseModel):
    index: Annotated[int, Field(title="Index")]
    message: CreateDeepNewsRequestMessage
    finish_reason: Annotated[Optional[str], Field(None, title="Finish Reason")]


class CreateDeepNewsResponseStreamChoice(BaseModel):
    index: Annotated[int, Field(title="Index")]
    delta: CreateDeepNewsRequestMessage
    finish_reason: Annotated[Optional[str], Field(None, title="Finish Reason")]


class CreateDeepNewsResponseUsage(BaseModel):
    prompt_tokens: Annotated[int, Field(title="Prompt Tokens")]
    completion_tokens: Annotated[int, Field(title="Completion Tokens")]
    total_tokens: Annotated[int, Field(title="Total Tokens")]


class CreateDeepNewsRequest(BaseSchema):
    model_config = ConfigDict(
        extra="allow",
    )
    model: Annotated[Optional[str], Field(title="Model")] = "deepseek"
    messages: Annotated[List[CreateDeepNewsRequestMessage], Field(title="Messages")]
    temperature: Annotated[Optional[float], Field(title="Temperature")] = 0.9
    top_p: Annotated[Optional[float], Field(title="Top P")] = 1.0
    n: Annotated[Optional[int], Field(title="N")] = 1
    stream: Annotated[Optional[bool], Field(title="Stream")] = False
    stop: Annotated[Optional[Union[str, List[str]]], Field(title="Stop")] = None
    max_tokens: Annotated[Optional[int], Field(title="Max Tokens")] = 9999
    presence_penalty: Annotated[Optional[int], Field(title="Presence Penalty")] = 0
    frequency_penalty: Annotated[Optional[int], Field(title="Frequency Penalty")] = 0
    user: Annotated[Optional[str], Field(title="User")] = None
    inline_citations: Annotated[
        Optional[Literal["markdown_link", "numbered", "none"]],
        Field(title="Type of inline citation formatting."),
    ] = "markdown_link"
    journalist_mode: Annotated[
        Optional[bool],
        Field(
            title=(
                "Activate journalist mode, with improved alignment for making claims"
                "with supporting evidence. Improved journalistic style."
            ),
        ),
    ] = True
    asknews_watermark: Annotated[
        Optional[bool], Field(title='Append "Generated by AskNews AI" watermark')
    ] = True
    append_references: Annotated[Optional[bool], Field(title="Append References or not")] = True
    conversational_awareness: Annotated[
        Optional[bool], Field(title="Conversational Awareness")
    ] = False
    filter_params: Annotated[
        Optional[Dict[str, Any]],
        Field(title="Any filter param available on the /news endpoint."),
    ] = None
    sources: Annotated[
        Optional[
            Union[
                Literal["asknews", "google"],
                List[Literal["asknews", "google"]],
            ]
        ],
        Field(title="Sources"),
    ] = "asknews"
    search_depth: Annotated[Optional[int], Field(title="Search Depth")] = 2
    max_depth: Annotated[Optional[int], Field(title="Max Depth")] = 4
    return_sources: Annotated[
        Optional[bool],
        Field(
            title="Return all collected sources as objects as the last token of the stream."
        ),
    ] = True


class CreateDeepNewsResponse(BaseSchema):
    id: Annotated[str, Field(title="Id")]
    created: Annotated[int, Field(title="Created")]
    object: Annotated[Optional[str], Field("chat.completion", title="Object")]
    model: Annotated[Optional[str], Field("deepseek", title="Model")]
    usage: CreateDeepNewsResponseUsage
    choices: Annotated[List[CreateDeepNewsResponseChoice], Field(title="Choices")]
    sources: Annotated[DeepNewsSources, Field(title="Sources")]


class CreateDeepNewsResponseStreamChunk(BaseSchema):
    __content_type__ = "text/event-stream"

    id: Annotated[str, Field(title="Id")]
    created: Annotated[int, Field(title="Created")]
    object: Annotated[Optional[str], Field("chat.completion.chunk", title="Object")]
    model: Annotated[Optional[str], Field("deepseek", title="Model")]
    usage: CreateDeepNewsResponseUsage
    choices: Annotated[List[CreateDeepNewsResponseStreamChoice], Field(title="Choices")]


class CreateDeepNewsResponseStreamSourcesNewsSource(BaseModel):
    kind: Literal["news"] = "news"
    data: SearchResponseDictItem


class CreateDeepNewsResponseStreamSourcesWebSource(BaseModel):
    kind: Literal["web"] = "web"
    data: WebSearchResult


class CreateDeepNewsResponseStreamSource(BaseSchema):
    __content_type__ = "text/event-stream"

    id: Annotated[str, Field(title="Id")]
    created: Annotated[int, Field(title="Created")]
    object: Annotated[Optional[str], Field(title="Object")] = "chat.completion.sources"
    source: Annotated[
        Union[
            Annotated[CreateDeepNewsResponseStreamSourcesNewsSource, Tag("news")],
            Annotated[CreateDeepNewsResponseStreamSourcesWebSource, Tag("web")],
        ],
        Field(title="Source"),
        Discriminator(kind_discriminator),
    ]


CreateDeepNewsResponseStream: TypeAlias = Annotated[
    Union[
        Annotated[CreateDeepNewsResponseStreamChunk, Tag("chat.completion.chunk")],
        Annotated[CreateDeepNewsResponseStreamSource, Tag("chat.completion.source")],
    ],
    Discriminator(object_discriminator),
]
