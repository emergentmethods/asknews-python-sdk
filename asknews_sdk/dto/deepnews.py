from __future__ import annotations

from typing import Any, Dict, List, Literal, Optional, Union

from pydantic import BaseModel, ConfigDict, Discriminator, Field, Tag
from typing_extensions import Annotated, TypeAlias

from asknews_sdk.dto.base import BaseSchema
from asknews_sdk.dto.chat import WebSearchResult
from asknews_sdk.dto.news import SearchResponseDictItem


def object_discriminator(v: Any) -> str:
    if isinstance(v, dict):
        return v.get("object", "")
    return getattr(v, "object", "")


class DeepNewsSources(BaseModel):
    news: Annotated[List[SearchResponseDictItem], Field(title="News")]
    web: Annotated[List[WebSearchResult], Field(title="Web")]


class CreateDeepNewsRequestMessage(BaseModel):
    role: Annotated[str, Field(title="Role")]
    content: Annotated[str, Field(title="Content")]
    name: Annotated[Optional[str], Field(None, title="Name")]
    function_call: Annotated[Optional[Dict[str, Any]], Field(None, title="Function Call")]


class CreateDeepNewsResponseChoice(BaseModel):
    index: Annotated[int, Field(title="Index")]
    message: CreateDeepNewsRequestMessage
    finish_reason: Annotated[Optional[str], Field(None, title="Finish Reason")]


class CreateDeepNewsResponseStreamChoice(BaseModel):
    index: Annotated[int, Field(title="Index")]
    delta: CreateDeepNewsRequestMessage
    finish_reason: Annotated[Optional[str], Field(None, title="Finish Reason")]


class CreateDeepNewsResponseUsage(BaseModel):
    prompt_tokens: Annotated[int, Field(title="Prompt Tokens")]
    completion_tokens: Annotated[int, Field(title="Completion Tokens")]
    total_tokens: Annotated[int, Field(title="Total Tokens")]


class CreateDeepNewsRequest(BaseSchema):
    model_config = ConfigDict(
        extra="allow",
    )
    model: Annotated[Optional[str], Field("deepseek", title="Model")]
    messages: Annotated[List[CreateDeepNewsRequestMessage], Field(title="Messages")]
    temperature: Annotated[Optional[float], Field(0.9, title="Temperature")]
    top_p: Annotated[Optional[float], Field(1.0, title="Top P")]
    n: Annotated[Optional[int], Field(1, title="N")]
    stream: Annotated[Optional[bool], Field(False, title="Stream")]
    stop: Annotated[Optional[Union[str, List[str]]], Field(None, title="Stop")]
    max_tokens: Annotated[Optional[int], Field(9999, title="Max Tokens")]
    presence_penalty: Annotated[Optional[int], Field(0, title="Presence Penalty")]
    frequency_penalty: Annotated[Optional[int], Field(0, title="Frequency Penalty")]
    user: Annotated[Optional[str], Field(None, title="User")]
    inline_citations: Annotated[
        Optional[Literal["markdown_link", "numbered", "none"]],
        Field("markdown_link", title="Type of inline citation formatting."),
    ]
    journalist_mode: Annotated[
        Optional[bool],
        Field(
            True,
            title=(
                "Activate journalist mode, with improved alignment for making claims"
                "with supporting evidence. Improved journalistic style."
            ),
        ),
    ]
    asknews_watermark: Annotated[
        Optional[bool], Field(True, title='Append "Generated by AskNews AI" watermark')
    ]
    append_references: Annotated[Optional[bool], Field(True, title="Append References or not")]
    conversational_awareness: Annotated[
        Optional[bool], Field(False, title="Conversational Awareness")
    ]
    filter_params: Annotated[
        Optional[Dict[str, Any]],
        Field(None, title="Any filter param available on the /news endpoint."),
    ]
    sources: Annotated[Optional[List[str]], Field(["asknews"], title="Sources")]
    search_depth: Annotated[Optional[int], Field(2, title="Search Depth")]
    max_depth: Annotated[Optional[int], Field(4, title="Max Depth")]
    return_sources: Annotated[
        Optional[bool],
        Field(
            True, title="Return all collected sources as objects as the last token of the stream."
        ),
    ]


class CreateDeepNewsResponse(BaseSchema):
    id: Annotated[str, Field(title="Id")]
    created: Annotated[int, Field(title="Created")]
    object: Annotated[Optional[str], Field("chat.completion", title="Object")]
    model: Annotated[Optional[str], Field("deepseek", title="Model")]
    usage: CreateDeepNewsResponseUsage
    choices: Annotated[List[CreateDeepNewsResponseChoice], Field(title="Choices")]
    sources: Annotated[DeepNewsSources, Field(title="Sources")]


class CreateDeepNewsResponseStreamToken(BaseSchema):
    __content_type__ = "text/event-stream"

    id: Annotated[str, Field(title="Id")]
    created: Annotated[int, Field(title="Created")]
    object: Annotated[Optional[str], Field("chat.completion.chunk", title="Object")]
    model: Annotated[Optional[str], Field("deepseek", title="Model")]
    usage: CreateDeepNewsResponseUsage
    choices: Annotated[List[CreateDeepNewsResponseStreamChoice], Field(title="Choices")]


class CreateDeepNewsResponseStreamSources(BaseSchema):
    __content_type__ = "text/event-stream"

    object: Annotated[Optional[str], Field(title="Object")] = "chat.completion.sources"
    sources: Annotated[DeepNewsSources, Field(title="Sources")]


CreateDeepNewsResponseStream: TypeAlias = Annotated[
    Union[
        Annotated[CreateDeepNewsResponseStreamToken, Tag("chat.completion.chunk")],
        Annotated[CreateDeepNewsResponseStreamSources, Tag("chat.completion.sources")],
    ],
    Discriminator(object_discriminator),
]
